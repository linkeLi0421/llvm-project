// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IRInfo.proto

#include "IRInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace irpb {
PROTOBUF_CONSTEXPR InstLoc::InstLoc(
    ::_pbi::ConstantInitialized)
  : filename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , lineno_(0u)
  , colno_(0u){}
struct InstLocDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstLocDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstLocDefaultTypeInternal() {}
  union {
    InstLoc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstLocDefaultTypeInternal _InstLoc_default_instance_;
PROTOBUF_CONSTEXPR InstIndex::InstIndex(
    ::_pbi::ConstantInitialized)
  : funcname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bblabel_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instno_(0u){}
struct InstIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstIndexDefaultTypeInternal() {}
  union {
    InstIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstIndexDefaultTypeInternal _InstIndex_default_instance_;
PROTOBUF_CONSTEXPR InstIndexList::InstIndexList(
    ::_pbi::ConstantInitialized)
  : idxs_(){}
struct InstIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstIndexListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstIndexListDefaultTypeInternal() {}
  union {
    InstIndexList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstIndexListDefaultTypeInternal _InstIndexList_default_instance_;
PROTOBUF_CONSTEXPR IRInst::IRInst(
    ::_pbi::ConstantInitialized)
  : oprand_()
  , locs_()
  , opcode_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , idx_(nullptr)
  , idxs_(nullptr){}
struct IRInstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRInstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRInstDefaultTypeInternal() {}
  union {
    IRInst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRInstDefaultTypeInternal _IRInst_default_instance_;
PROTOBUF_CONSTEXPR IRBasicBlock::IRBasicBlock(
    ::_pbi::ConstantInitialized)
  : is_()
  , succbblabel_()
  , bblabellist_()
  , predbblabel_()
  , bblabel_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct IRBasicBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRBasicBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRBasicBlockDefaultTypeInternal() {}
  union {
    IRBasicBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRBasicBlockDefaultTypeInternal _IRBasicBlock_default_instance_;
PROTOBUF_CONSTEXPR IRFunction::IRFunction(
    ::_pbi::ConstantInitialized)
  : bbs_()
  , funcname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , funcid_(0u){}
struct IRFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRFunctionDefaultTypeInternal() {}
  union {
    IRFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRFunctionDefaultTypeInternal _IRFunction_default_instance_;
PROTOBUF_CONSTEXPR IRFunctionBook::IRFunctionBook(
    ::_pbi::ConstantInitialized)
  : fs_()
  , arch_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct IRFunctionBookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IRFunctionBookDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IRFunctionBookDefaultTypeInternal() {}
  union {
    IRFunctionBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IRFunctionBookDefaultTypeInternal _IRFunctionBook_default_instance_;
}  // namespace irpb
static ::_pb::Metadata file_level_metadata_IRInfo_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_IRInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_IRInfo_2eproto = nullptr;

const uint32_t TableStruct_IRInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::irpb::InstLoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::irpb::InstLoc, filename_),
  PROTOBUF_FIELD_OFFSET(::irpb::InstLoc, lineno_),
  PROTOBUF_FIELD_OFFSET(::irpb::InstLoc, colno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::irpb::InstIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::irpb::InstIndex, funcname_),
  PROTOBUF_FIELD_OFFSET(::irpb::InstIndex, bblabel_),
  PROTOBUF_FIELD_OFFSET(::irpb::InstIndex, instno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::irpb::InstIndexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::irpb::InstIndexList, idxs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::irpb::IRInst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::irpb::IRInst, opcode_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRInst, oprand_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRInst, locs_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRInst, idx_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRInst, idxs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::irpb::IRBasicBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::irpb::IRBasicBlock, bblabel_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRBasicBlock, bblabellist_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRBasicBlock, is_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRBasicBlock, succbblabel_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRBasicBlock, predbblabel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::irpb::IRFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::irpb::IRFunction, funcname_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRFunction, funcid_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRFunction, bbs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::irpb::IRFunctionBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::irpb::IRFunctionBook, arch_),
  PROTOBUF_FIELD_OFFSET(::irpb::IRFunctionBook, fs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::irpb::InstLoc)},
  { 9, -1, -1, sizeof(::irpb::InstIndex)},
  { 18, -1, -1, sizeof(::irpb::InstIndexList)},
  { 25, -1, -1, sizeof(::irpb::IRInst)},
  { 36, -1, -1, sizeof(::irpb::IRBasicBlock)},
  { 47, -1, -1, sizeof(::irpb::IRFunction)},
  { 56, -1, -1, sizeof(::irpb::IRFunctionBook)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::irpb::_InstLoc_default_instance_._instance,
  &::irpb::_InstIndex_default_instance_._instance,
  &::irpb::_InstIndexList_default_instance_._instance,
  &::irpb::_IRInst_default_instance_._instance,
  &::irpb::_IRBasicBlock_default_instance_._instance,
  &::irpb::_IRFunction_default_instance_._instance,
  &::irpb::_IRFunctionBook_default_instance_._instance,
};

const char descriptor_table_protodef_IRInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014IRInfo.proto\022\004irpb\":\n\007InstLoc\022\020\n\010Filen"
  "ame\030\001 \001(\t\022\016\n\006LineNo\030\002 \001(\r\022\r\n\005ColNo\030\003 \001(\r"
  "\">\n\tInstIndex\022\020\n\010FuncName\030\001 \001(\t\022\017\n\007BBLab"
  "el\030\002 \001(\t\022\016\n\006InstNo\030\003 \001(\r\".\n\rInstIndexLis"
  "t\022\035\n\004Idxs\030\001 \003(\0132\017.irpb.InstIndex\"\206\001\n\006IRI"
  "nst\022\016\n\006Opcode\030\001 \001(\t\022\016\n\006Oprand\030\002 \003(\t\022\033\n\004L"
  "ocs\030\003 \003(\0132\r.irpb.InstLoc\022\034\n\003Idx\030\005 \001(\0132\017."
  "irpb.InstIndex\022!\n\004Idxs\030\006 \001(\0132\023.irpb.Inst"
  "IndexList\"x\n\014IRBasicBlock\022\017\n\007BBLabel\030\001 \001"
  "(\t\022\023\n\013BBLabelList\030\005 \003(\t\022\030\n\002Is\030\003 \003(\0132\014.ir"
  "pb.IRInst\022\023\n\013SuccBBLabel\030\004 \003(\t\022\023\n\013PredBB"
  "Label\030\006 \003(\t\"O\n\nIRFunction\022\020\n\010FuncName\030\001 "
  "\001(\t\022\016\n\006FuncID\030\002 \001(\r\022\037\n\003BBs\030\003 \003(\0132\022.irpb."
  "IRBasicBlock\"<\n\016IRFunctionBook\022\014\n\004arch\030\002"
  " \001(\t\022\034\n\002Fs\030\001 \003(\0132\020.irpb.IRFunctionb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_IRInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_IRInfo_2eproto = {
    false, false, 602, descriptor_table_protodef_IRInfo_2eproto,
    "IRInfo.proto",
    &descriptor_table_IRInfo_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_IRInfo_2eproto::offsets,
    file_level_metadata_IRInfo_2eproto, file_level_enum_descriptors_IRInfo_2eproto,
    file_level_service_descriptors_IRInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_IRInfo_2eproto_getter() {
  return &descriptor_table_IRInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_IRInfo_2eproto(&descriptor_table_IRInfo_2eproto);
namespace irpb {

// ===================================================================

class InstLoc::_Internal {
 public:
};

InstLoc::InstLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:irpb.InstLoc)
}
InstLoc::InstLoc(const InstLoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    filename_.Set(from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lineno_, &from.lineno_,
    static_cast<size_t>(reinterpret_cast<char*>(&colno_) -
    reinterpret_cast<char*>(&lineno_)) + sizeof(colno_));
  // @@protoc_insertion_point(copy_constructor:irpb.InstLoc)
}

inline void InstLoc::SharedCtor() {
filename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lineno_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&colno_) -
    reinterpret_cast<char*>(&lineno_)) + sizeof(colno_));
}

InstLoc::~InstLoc() {
  // @@protoc_insertion_point(destructor:irpb.InstLoc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstLoc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.Destroy();
}

void InstLoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstLoc::Clear() {
// @@protoc_insertion_point(message_clear_start:irpb.InstLoc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  ::memset(&lineno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colno_) -
      reinterpret_cast<char*>(&lineno_)) + sizeof(colno_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstLoc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "irpb.InstLoc.Filename"));
        } else
          goto handle_unusual;
        continue;
      // uint32 LineNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lineno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ColNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          colno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstLoc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:irpb.InstLoc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.InstLoc.Filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // uint32 LineNo = 2;
  if (this->_internal_lineno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lineno(), target);
  }

  // uint32 ColNo = 3;
  if (this->_internal_colno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_colno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:irpb.InstLoc)
  return target;
}

size_t InstLoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:irpb.InstLoc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // uint32 LineNo = 2;
  if (this->_internal_lineno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lineno());
  }

  // uint32 ColNo = 3;
  if (this->_internal_colno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_colno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstLoc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstLoc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstLoc::GetClassData() const { return &_class_data_; }

void InstLoc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstLoc *>(to)->MergeFrom(
      static_cast<const InstLoc &>(from));
}


void InstLoc::MergeFrom(const InstLoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:irpb.InstLoc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (from._internal_lineno() != 0) {
    _internal_set_lineno(from._internal_lineno());
  }
  if (from._internal_colno() != 0) {
    _internal_set_colno(from._internal_colno());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstLoc::CopyFrom(const InstLoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:irpb.InstLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstLoc::IsInitialized() const {
  return true;
}

void InstLoc::InternalSwap(InstLoc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstLoc, colno_)
      + sizeof(InstLoc::colno_)
      - PROTOBUF_FIELD_OFFSET(InstLoc, lineno_)>(
          reinterpret_cast<char*>(&lineno_),
          reinterpret_cast<char*>(&other->lineno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstLoc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IRInfo_2eproto_getter, &descriptor_table_IRInfo_2eproto_once,
      file_level_metadata_IRInfo_2eproto[0]);
}

// ===================================================================

class InstIndex::_Internal {
 public:
};

InstIndex::InstIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:irpb.InstIndex)
}
InstIndex::InstIndex(const InstIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  funcname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    funcname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funcname().empty()) {
    funcname_.Set(from._internal_funcname(), 
      GetArenaForAllocation());
  }
  bblabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bblabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bblabel().empty()) {
    bblabel_.Set(from._internal_bblabel(), 
      GetArenaForAllocation());
  }
  instno_ = from.instno_;
  // @@protoc_insertion_point(copy_constructor:irpb.InstIndex)
}

inline void InstIndex::SharedCtor() {
funcname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  funcname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bblabel_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bblabel_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instno_ = 0u;
}

InstIndex::~InstIndex() {
  // @@protoc_insertion_point(destructor:irpb.InstIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  funcname_.Destroy();
  bblabel_.Destroy();
}

void InstIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:irpb.InstIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funcname_.ClearToEmpty();
  bblabel_.ClearToEmpty();
  instno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FuncName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_funcname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "irpb.InstIndex.FuncName"));
        } else
          goto handle_unusual;
        continue;
      // string BBLabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bblabel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "irpb.InstIndex.BBLabel"));
        } else
          goto handle_unusual;
        continue;
      // uint32 InstNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          instno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:irpb.InstIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string FuncName = 1;
  if (!this->_internal_funcname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funcname().data(), static_cast<int>(this->_internal_funcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.InstIndex.FuncName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_funcname(), target);
  }

  // string BBLabel = 2;
  if (!this->_internal_bblabel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bblabel().data(), static_cast<int>(this->_internal_bblabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.InstIndex.BBLabel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bblabel(), target);
  }

  // uint32 InstNo = 3;
  if (this->_internal_instno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_instno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:irpb.InstIndex)
  return target;
}

size_t InstIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:irpb.InstIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FuncName = 1;
  if (!this->_internal_funcname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_funcname());
  }

  // string BBLabel = 2;
  if (!this->_internal_bblabel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bblabel());
  }

  // uint32 InstNo = 3;
  if (this->_internal_instno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstIndex::GetClassData() const { return &_class_data_; }

void InstIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstIndex *>(to)->MergeFrom(
      static_cast<const InstIndex &>(from));
}


void InstIndex::MergeFrom(const InstIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:irpb.InstIndex)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_funcname().empty()) {
    _internal_set_funcname(from._internal_funcname());
  }
  if (!from._internal_bblabel().empty()) {
    _internal_set_bblabel(from._internal_bblabel());
  }
  if (from._internal_instno() != 0) {
    _internal_set_instno(from._internal_instno());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstIndex::CopyFrom(const InstIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:irpb.InstIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstIndex::IsInitialized() const {
  return true;
}

void InstIndex::InternalSwap(InstIndex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &funcname_, lhs_arena,
      &other->funcname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bblabel_, lhs_arena,
      &other->bblabel_, rhs_arena
  );
  swap(instno_, other->instno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IRInfo_2eproto_getter, &descriptor_table_IRInfo_2eproto_once,
      file_level_metadata_IRInfo_2eproto[1]);
}

// ===================================================================

class InstIndexList::_Internal {
 public:
};

InstIndexList::InstIndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  idxs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:irpb.InstIndexList)
}
InstIndexList::InstIndexList(const InstIndexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      idxs_(from.idxs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:irpb.InstIndexList)
}

inline void InstIndexList::SharedCtor() {
}

InstIndexList::~InstIndexList() {
  // @@protoc_insertion_point(destructor:irpb.InstIndexList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstIndexList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InstIndexList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:irpb.InstIndexList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idxs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstIndexList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .irpb.InstIndex Idxs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_idxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstIndexList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:irpb.InstIndexList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .irpb.InstIndex Idxs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_idxs_size()); i < n; i++) {
    const auto& repfield = this->_internal_idxs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:irpb.InstIndexList)
  return target;
}

size_t InstIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:irpb.InstIndexList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .irpb.InstIndex Idxs = 1;
  total_size += 1UL * this->_internal_idxs_size();
  for (const auto& msg : this->idxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstIndexList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstIndexList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstIndexList::GetClassData() const { return &_class_data_; }

void InstIndexList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstIndexList *>(to)->MergeFrom(
      static_cast<const InstIndexList &>(from));
}


void InstIndexList::MergeFrom(const InstIndexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:irpb.InstIndexList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  idxs_.MergeFrom(from.idxs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstIndexList::CopyFrom(const InstIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:irpb.InstIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstIndexList::IsInitialized() const {
  return true;
}

void InstIndexList::InternalSwap(InstIndexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  idxs_.InternalSwap(&other->idxs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IRInfo_2eproto_getter, &descriptor_table_IRInfo_2eproto_once,
      file_level_metadata_IRInfo_2eproto[2]);
}

// ===================================================================

class IRInst::_Internal {
 public:
  static const ::irpb::InstIndex& idx(const IRInst* msg);
  static const ::irpb::InstIndexList& idxs(const IRInst* msg);
};

const ::irpb::InstIndex&
IRInst::_Internal::idx(const IRInst* msg) {
  return *msg->idx_;
}
const ::irpb::InstIndexList&
IRInst::_Internal::idxs(const IRInst* msg) {
  return *msg->idxs_;
}
IRInst::IRInst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  oprand_(arena),
  locs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:irpb.IRInst)
}
IRInst::IRInst(const IRInst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      oprand_(from.oprand_),
      locs_(from.locs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opcode().empty()) {
    opcode_.Set(from._internal_opcode(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_idx()) {
    idx_ = new ::irpb::InstIndex(*from.idx_);
  } else {
    idx_ = nullptr;
  }
  if (from._internal_has_idxs()) {
    idxs_ = new ::irpb::InstIndexList(*from.idxs_);
  } else {
    idxs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:irpb.IRInst)
}

inline void IRInst::SharedCtor() {
opcode_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opcode_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idxs_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(idxs_));
}

IRInst::~IRInst() {
  // @@protoc_insertion_point(destructor:irpb.IRInst)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRInst::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opcode_.Destroy();
  if (this != internal_default_instance()) delete idx_;
  if (this != internal_default_instance()) delete idxs_;
}

void IRInst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRInst::Clear() {
// @@protoc_insertion_point(message_clear_start:irpb.IRInst)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oprand_.Clear();
  locs_.Clear();
  opcode_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && idx_ != nullptr) {
    delete idx_;
  }
  idx_ = nullptr;
  if (GetArenaForAllocation() == nullptr && idxs_ != nullptr) {
    delete idxs_;
  }
  idxs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRInst::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Opcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "irpb.IRInst.Opcode"));
        } else
          goto handle_unusual;
        continue;
      // repeated string Oprand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_oprand();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "irpb.IRInst.Oprand"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .irpb.InstLoc Locs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .irpb.InstIndex Idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_idx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .irpb.InstIndexList Idxs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_idxs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRInst::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:irpb.IRInst)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Opcode = 1;
  if (!this->_internal_opcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opcode().data(), static_cast<int>(this->_internal_opcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRInst.Opcode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_opcode(), target);
  }

  // repeated string Oprand = 2;
  for (int i = 0, n = this->_internal_oprand_size(); i < n; i++) {
    const auto& s = this->_internal_oprand(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRInst.Oprand");
    target = stream->WriteString(2, s, target);
  }

  // repeated .irpb.InstLoc Locs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locs_size()); i < n; i++) {
    const auto& repfield = this->_internal_locs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .irpb.InstIndex Idx = 5;
  if (this->_internal_has_idx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::idx(this),
        _Internal::idx(this).GetCachedSize(), target, stream);
  }

  // .irpb.InstIndexList Idxs = 6;
  if (this->_internal_has_idxs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::idxs(this),
        _Internal::idxs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:irpb.IRInst)
  return target;
}

size_t IRInst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:irpb.IRInst)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Oprand = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(oprand_.size());
  for (int i = 0, n = oprand_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      oprand_.Get(i));
  }

  // repeated .irpb.InstLoc Locs = 3;
  total_size += 1UL * this->_internal_locs_size();
  for (const auto& msg : this->locs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Opcode = 1;
  if (!this->_internal_opcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opcode());
  }

  // .irpb.InstIndex Idx = 5;
  if (this->_internal_has_idx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *idx_);
  }

  // .irpb.InstIndexList Idxs = 6;
  if (this->_internal_has_idxs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *idxs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRInst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRInst::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRInst::GetClassData() const { return &_class_data_; }

void IRInst::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRInst *>(to)->MergeFrom(
      static_cast<const IRInst &>(from));
}


void IRInst::MergeFrom(const IRInst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:irpb.IRInst)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  oprand_.MergeFrom(from.oprand_);
  locs_.MergeFrom(from.locs_);
  if (!from._internal_opcode().empty()) {
    _internal_set_opcode(from._internal_opcode());
  }
  if (from._internal_has_idx()) {
    _internal_mutable_idx()->::irpb::InstIndex::MergeFrom(from._internal_idx());
  }
  if (from._internal_has_idxs()) {
    _internal_mutable_idxs()->::irpb::InstIndexList::MergeFrom(from._internal_idxs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRInst::CopyFrom(const IRInst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:irpb.IRInst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRInst::IsInitialized() const {
  return true;
}

void IRInst::InternalSwap(IRInst* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  oprand_.InternalSwap(&other->oprand_);
  locs_.InternalSwap(&other->locs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &opcode_, lhs_arena,
      &other->opcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRInst, idxs_)
      + sizeof(IRInst::idxs_)
      - PROTOBUF_FIELD_OFFSET(IRInst, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRInst::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IRInfo_2eproto_getter, &descriptor_table_IRInfo_2eproto_once,
      file_level_metadata_IRInfo_2eproto[3]);
}

// ===================================================================

class IRBasicBlock::_Internal {
 public:
};

IRBasicBlock::IRBasicBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  is_(arena),
  succbblabel_(arena),
  bblabellist_(arena),
  predbblabel_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:irpb.IRBasicBlock)
}
IRBasicBlock::IRBasicBlock(const IRBasicBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      is_(from.is_),
      succbblabel_(from.succbblabel_),
      bblabellist_(from.bblabellist_),
      predbblabel_(from.predbblabel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bblabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bblabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bblabel().empty()) {
    bblabel_.Set(from._internal_bblabel(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:irpb.IRBasicBlock)
}

inline void IRBasicBlock::SharedCtor() {
bblabel_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bblabel_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IRBasicBlock::~IRBasicBlock() {
  // @@protoc_insertion_point(destructor:irpb.IRBasicBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRBasicBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bblabel_.Destroy();
}

void IRBasicBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRBasicBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:irpb.IRBasicBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_.Clear();
  succbblabel_.Clear();
  bblabellist_.Clear();
  predbblabel_.Clear();
  bblabel_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRBasicBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BBLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bblabel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "irpb.IRBasicBlock.BBLabel"));
        } else
          goto handle_unusual;
        continue;
      // repeated .irpb.IRInst Is = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_is(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string SuccBBLabel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_succbblabel();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "irpb.IRBasicBlock.SuccBBLabel"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string BBLabelList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bblabellist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "irpb.IRBasicBlock.BBLabelList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string PredBBLabel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_predbblabel();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "irpb.IRBasicBlock.PredBBLabel"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRBasicBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:irpb.IRBasicBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BBLabel = 1;
  if (!this->_internal_bblabel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bblabel().data(), static_cast<int>(this->_internal_bblabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRBasicBlock.BBLabel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bblabel(), target);
  }

  // repeated .irpb.IRInst Is = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_is_size()); i < n; i++) {
    const auto& repfield = this->_internal_is(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string SuccBBLabel = 4;
  for (int i = 0, n = this->_internal_succbblabel_size(); i < n; i++) {
    const auto& s = this->_internal_succbblabel(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRBasicBlock.SuccBBLabel");
    target = stream->WriteString(4, s, target);
  }

  // repeated string BBLabelList = 5;
  for (int i = 0, n = this->_internal_bblabellist_size(); i < n; i++) {
    const auto& s = this->_internal_bblabellist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRBasicBlock.BBLabelList");
    target = stream->WriteString(5, s, target);
  }

  // repeated string PredBBLabel = 6;
  for (int i = 0, n = this->_internal_predbblabel_size(); i < n; i++) {
    const auto& s = this->_internal_predbblabel(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRBasicBlock.PredBBLabel");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:irpb.IRBasicBlock)
  return target;
}

size_t IRBasicBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:irpb.IRBasicBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .irpb.IRInst Is = 3;
  total_size += 1UL * this->_internal_is_size();
  for (const auto& msg : this->is_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string SuccBBLabel = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(succbblabel_.size());
  for (int i = 0, n = succbblabel_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      succbblabel_.Get(i));
  }

  // repeated string BBLabelList = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bblabellist_.size());
  for (int i = 0, n = bblabellist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bblabellist_.Get(i));
  }

  // repeated string PredBBLabel = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(predbblabel_.size());
  for (int i = 0, n = predbblabel_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      predbblabel_.Get(i));
  }

  // string BBLabel = 1;
  if (!this->_internal_bblabel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bblabel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRBasicBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRBasicBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRBasicBlock::GetClassData() const { return &_class_data_; }

void IRBasicBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRBasicBlock *>(to)->MergeFrom(
      static_cast<const IRBasicBlock &>(from));
}


void IRBasicBlock::MergeFrom(const IRBasicBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:irpb.IRBasicBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  is_.MergeFrom(from.is_);
  succbblabel_.MergeFrom(from.succbblabel_);
  bblabellist_.MergeFrom(from.bblabellist_);
  predbblabel_.MergeFrom(from.predbblabel_);
  if (!from._internal_bblabel().empty()) {
    _internal_set_bblabel(from._internal_bblabel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRBasicBlock::CopyFrom(const IRBasicBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:irpb.IRBasicBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRBasicBlock::IsInitialized() const {
  return true;
}

void IRBasicBlock::InternalSwap(IRBasicBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  is_.InternalSwap(&other->is_);
  succbblabel_.InternalSwap(&other->succbblabel_);
  bblabellist_.InternalSwap(&other->bblabellist_);
  predbblabel_.InternalSwap(&other->predbblabel_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bblabel_, lhs_arena,
      &other->bblabel_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IRBasicBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IRInfo_2eproto_getter, &descriptor_table_IRInfo_2eproto_once,
      file_level_metadata_IRInfo_2eproto[4]);
}

// ===================================================================

class IRFunction::_Internal {
 public:
};

IRFunction::IRFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bbs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:irpb.IRFunction)
}
IRFunction::IRFunction(const IRFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bbs_(from.bbs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  funcname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    funcname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funcname().empty()) {
    funcname_.Set(from._internal_funcname(), 
      GetArenaForAllocation());
  }
  funcid_ = from.funcid_;
  // @@protoc_insertion_point(copy_constructor:irpb.IRFunction)
}

inline void IRFunction::SharedCtor() {
funcname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  funcname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
funcid_ = 0u;
}

IRFunction::~IRFunction() {
  // @@protoc_insertion_point(destructor:irpb.IRFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  funcname_.Destroy();
}

void IRFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:irpb.IRFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bbs_.Clear();
  funcname_.ClearToEmpty();
  funcid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FuncName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_funcname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "irpb.IRFunction.FuncName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 FuncID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          funcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .irpb.IRBasicBlock BBs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bbs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:irpb.IRFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string FuncName = 1;
  if (!this->_internal_funcname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funcname().data(), static_cast<int>(this->_internal_funcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRFunction.FuncName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_funcname(), target);
  }

  // uint32 FuncID = 2;
  if (this->_internal_funcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_funcid(), target);
  }

  // repeated .irpb.IRBasicBlock BBs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bbs_size()); i < n; i++) {
    const auto& repfield = this->_internal_bbs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:irpb.IRFunction)
  return target;
}

size_t IRFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:irpb.IRFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .irpb.IRBasicBlock BBs = 3;
  total_size += 1UL * this->_internal_bbs_size();
  for (const auto& msg : this->bbs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string FuncName = 1;
  if (!this->_internal_funcname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_funcname());
  }

  // uint32 FuncID = 2;
  if (this->_internal_funcid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_funcid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRFunction::GetClassData() const { return &_class_data_; }

void IRFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRFunction *>(to)->MergeFrom(
      static_cast<const IRFunction &>(from));
}


void IRFunction::MergeFrom(const IRFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:irpb.IRFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bbs_.MergeFrom(from.bbs_);
  if (!from._internal_funcname().empty()) {
    _internal_set_funcname(from._internal_funcname());
  }
  if (from._internal_funcid() != 0) {
    _internal_set_funcid(from._internal_funcid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRFunction::CopyFrom(const IRFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:irpb.IRFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRFunction::IsInitialized() const {
  return true;
}

void IRFunction::InternalSwap(IRFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bbs_.InternalSwap(&other->bbs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &funcname_, lhs_arena,
      &other->funcname_, rhs_arena
  );
  swap(funcid_, other->funcid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IRFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IRInfo_2eproto_getter, &descriptor_table_IRInfo_2eproto_once,
      file_level_metadata_IRInfo_2eproto[5]);
}

// ===================================================================

class IRFunctionBook::_Internal {
 public:
};

IRFunctionBook::IRFunctionBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:irpb.IRFunctionBook)
}
IRFunctionBook::IRFunctionBook(const IRFunctionBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fs_(from.fs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  arch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    arch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arch().empty()) {
    arch_.Set(from._internal_arch(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:irpb.IRFunctionBook)
}

inline void IRFunctionBook::SharedCtor() {
arch_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  arch_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IRFunctionBook::~IRFunctionBook() {
  // @@protoc_insertion_point(destructor:irpb.IRFunctionBook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IRFunctionBook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  arch_.Destroy();
}

void IRFunctionBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRFunctionBook::Clear() {
// @@protoc_insertion_point(message_clear_start:irpb.IRFunctionBook)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fs_.Clear();
  arch_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRFunctionBook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .irpb.IRFunction Fs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string arch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_arch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "irpb.IRFunctionBook.arch"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRFunctionBook::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:irpb.IRFunctionBook)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .irpb.IRFunction Fs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fs_size()); i < n; i++) {
    const auto& repfield = this->_internal_fs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string arch = 2;
  if (!this->_internal_arch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "irpb.IRFunctionBook.arch");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:irpb.IRFunctionBook)
  return target;
}

size_t IRFunctionBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:irpb.IRFunctionBook)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .irpb.IRFunction Fs = 1;
  total_size += 1UL * this->_internal_fs_size();
  for (const auto& msg : this->fs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string arch = 2;
  if (!this->_internal_arch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRFunctionBook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRFunctionBook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRFunctionBook::GetClassData() const { return &_class_data_; }

void IRFunctionBook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRFunctionBook *>(to)->MergeFrom(
      static_cast<const IRFunctionBook &>(from));
}


void IRFunctionBook::MergeFrom(const IRFunctionBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:irpb.IRFunctionBook)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fs_.MergeFrom(from.fs_);
  if (!from._internal_arch().empty()) {
    _internal_set_arch(from._internal_arch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRFunctionBook::CopyFrom(const IRFunctionBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:irpb.IRFunctionBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRFunctionBook::IsInitialized() const {
  return true;
}

void IRFunctionBook::InternalSwap(IRFunctionBook* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fs_.InternalSwap(&other->fs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &arch_, lhs_arena,
      &other->arch_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IRFunctionBook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IRInfo_2eproto_getter, &descriptor_table_IRInfo_2eproto_once,
      file_level_metadata_IRInfo_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace irpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::irpb::InstLoc*
Arena::CreateMaybeMessage< ::irpb::InstLoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::irpb::InstLoc >(arena);
}
template<> PROTOBUF_NOINLINE ::irpb::InstIndex*
Arena::CreateMaybeMessage< ::irpb::InstIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::irpb::InstIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::irpb::InstIndexList*
Arena::CreateMaybeMessage< ::irpb::InstIndexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::irpb::InstIndexList >(arena);
}
template<> PROTOBUF_NOINLINE ::irpb::IRInst*
Arena::CreateMaybeMessage< ::irpb::IRInst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::irpb::IRInst >(arena);
}
template<> PROTOBUF_NOINLINE ::irpb::IRBasicBlock*
Arena::CreateMaybeMessage< ::irpb::IRBasicBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::irpb::IRBasicBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::irpb::IRFunction*
Arena::CreateMaybeMessage< ::irpb::IRFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::irpb::IRFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::irpb::IRFunctionBook*
Arena::CreateMaybeMessage< ::irpb::IRFunctionBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::irpb::IRFunctionBook >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

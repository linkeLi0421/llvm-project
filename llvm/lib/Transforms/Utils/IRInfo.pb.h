// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IRInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IRInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IRInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IRInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IRInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IRInfo_2eproto;
namespace irpb {
class IRBasicBlock;
struct IRBasicBlockDefaultTypeInternal;
extern IRBasicBlockDefaultTypeInternal _IRBasicBlock_default_instance_;
class IRFunction;
struct IRFunctionDefaultTypeInternal;
extern IRFunctionDefaultTypeInternal _IRFunction_default_instance_;
class IRFunctionBook;
struct IRFunctionBookDefaultTypeInternal;
extern IRFunctionBookDefaultTypeInternal _IRFunctionBook_default_instance_;
class IRInst;
struct IRInstDefaultTypeInternal;
extern IRInstDefaultTypeInternal _IRInst_default_instance_;
class InstIndex;
struct InstIndexDefaultTypeInternal;
extern InstIndexDefaultTypeInternal _InstIndex_default_instance_;
class InstIndexList;
struct InstIndexListDefaultTypeInternal;
extern InstIndexListDefaultTypeInternal _InstIndexList_default_instance_;
class InstLoc;
struct InstLocDefaultTypeInternal;
extern InstLocDefaultTypeInternal _InstLoc_default_instance_;
}  // namespace irpb
PROTOBUF_NAMESPACE_OPEN
template<> ::irpb::IRBasicBlock* Arena::CreateMaybeMessage<::irpb::IRBasicBlock>(Arena*);
template<> ::irpb::IRFunction* Arena::CreateMaybeMessage<::irpb::IRFunction>(Arena*);
template<> ::irpb::IRFunctionBook* Arena::CreateMaybeMessage<::irpb::IRFunctionBook>(Arena*);
template<> ::irpb::IRInst* Arena::CreateMaybeMessage<::irpb::IRInst>(Arena*);
template<> ::irpb::InstIndex* Arena::CreateMaybeMessage<::irpb::InstIndex>(Arena*);
template<> ::irpb::InstIndexList* Arena::CreateMaybeMessage<::irpb::InstIndexList>(Arena*);
template<> ::irpb::InstLoc* Arena::CreateMaybeMessage<::irpb::InstLoc>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace irpb {

// ===================================================================

class InstLoc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:irpb.InstLoc) */ {
 public:
  inline InstLoc() : InstLoc(nullptr) {}
  ~InstLoc() override;
  explicit PROTOBUF_CONSTEXPR InstLoc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstLoc(const InstLoc& from);
  InstLoc(InstLoc&& from) noexcept
    : InstLoc() {
    *this = ::std::move(from);
  }

  inline InstLoc& operator=(const InstLoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstLoc& operator=(InstLoc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstLoc& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstLoc* internal_default_instance() {
    return reinterpret_cast<const InstLoc*>(
               &_InstLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstLoc& a, InstLoc& b) {
    a.Swap(&b);
  }
  inline void Swap(InstLoc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstLoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstLoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstLoc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstLoc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InstLoc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstLoc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "irpb.InstLoc";
  }
  protected:
  explicit InstLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kLineNoFieldNumber = 2,
    kColNoFieldNumber = 3,
  };
  // string Filename = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint32 LineNo = 2;
  void clear_lineno();
  uint32_t lineno() const;
  void set_lineno(uint32_t value);
  private:
  uint32_t _internal_lineno() const;
  void _internal_set_lineno(uint32_t value);
  public:

  // uint32 ColNo = 3;
  void clear_colno();
  uint32_t colno() const;
  void set_colno(uint32_t value);
  private:
  uint32_t _internal_colno() const;
  void _internal_set_colno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:irpb.InstLoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint32_t lineno_;
  uint32_t colno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IRInfo_2eproto;
};
// -------------------------------------------------------------------

class InstIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:irpb.InstIndex) */ {
 public:
  inline InstIndex() : InstIndex(nullptr) {}
  ~InstIndex() override;
  explicit PROTOBUF_CONSTEXPR InstIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstIndex(const InstIndex& from);
  InstIndex(InstIndex&& from) noexcept
    : InstIndex() {
    *this = ::std::move(from);
  }

  inline InstIndex& operator=(const InstIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstIndex& operator=(InstIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstIndex* internal_default_instance() {
    return reinterpret_cast<const InstIndex*>(
               &_InstIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstIndex& a, InstIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(InstIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InstIndex& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "irpb.InstIndex";
  }
  protected:
  explicit InstIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncNameFieldNumber = 1,
    kBBLabelFieldNumber = 2,
    kInstNoFieldNumber = 3,
  };
  // string FuncName = 1;
  void clear_funcname();
  const std::string& funcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_funcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_funcname();
  PROTOBUF_NODISCARD std::string* release_funcname();
  void set_allocated_funcname(std::string* funcname);
  private:
  const std::string& _internal_funcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funcname(const std::string& value);
  std::string* _internal_mutable_funcname();
  public:

  // string BBLabel = 2;
  void clear_bblabel();
  const std::string& bblabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bblabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bblabel();
  PROTOBUF_NODISCARD std::string* release_bblabel();
  void set_allocated_bblabel(std::string* bblabel);
  private:
  const std::string& _internal_bblabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bblabel(const std::string& value);
  std::string* _internal_mutable_bblabel();
  public:

  // uint32 InstNo = 3;
  void clear_instno();
  uint32_t instno() const;
  void set_instno(uint32_t value);
  private:
  uint32_t _internal_instno() const;
  void _internal_set_instno(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:irpb.InstIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funcname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bblabel_;
  uint32_t instno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IRInfo_2eproto;
};
// -------------------------------------------------------------------

class InstIndexList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:irpb.InstIndexList) */ {
 public:
  inline InstIndexList() : InstIndexList(nullptr) {}
  ~InstIndexList() override;
  explicit PROTOBUF_CONSTEXPR InstIndexList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstIndexList(const InstIndexList& from);
  InstIndexList(InstIndexList&& from) noexcept
    : InstIndexList() {
    *this = ::std::move(from);
  }

  inline InstIndexList& operator=(const InstIndexList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstIndexList& operator=(InstIndexList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstIndexList& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstIndexList* internal_default_instance() {
    return reinterpret_cast<const InstIndexList*>(
               &_InstIndexList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InstIndexList& a, InstIndexList& b) {
    a.Swap(&b);
  }
  inline void Swap(InstIndexList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstIndexList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstIndexList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstIndexList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstIndexList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InstIndexList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstIndexList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "irpb.InstIndexList";
  }
  protected:
  explicit InstIndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdxsFieldNumber = 1,
  };
  // repeated .irpb.InstIndex Idxs = 1;
  int idxs_size() const;
  private:
  int _internal_idxs_size() const;
  public:
  void clear_idxs();
  ::irpb::InstIndex* mutable_idxs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstIndex >*
      mutable_idxs();
  private:
  const ::irpb::InstIndex& _internal_idxs(int index) const;
  ::irpb::InstIndex* _internal_add_idxs();
  public:
  const ::irpb::InstIndex& idxs(int index) const;
  ::irpb::InstIndex* add_idxs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstIndex >&
      idxs() const;

  // @@protoc_insertion_point(class_scope:irpb.InstIndexList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstIndex > idxs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IRInfo_2eproto;
};
// -------------------------------------------------------------------

class IRInst final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:irpb.IRInst) */ {
 public:
  inline IRInst() : IRInst(nullptr) {}
  ~IRInst() override;
  explicit PROTOBUF_CONSTEXPR IRInst(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IRInst(const IRInst& from);
  IRInst(IRInst&& from) noexcept
    : IRInst() {
    *this = ::std::move(from);
  }

  inline IRInst& operator=(const IRInst& from) {
    CopyFrom(from);
    return *this;
  }
  inline IRInst& operator=(IRInst&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IRInst& default_instance() {
    return *internal_default_instance();
  }
  static inline const IRInst* internal_default_instance() {
    return reinterpret_cast<const IRInst*>(
               &_IRInst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IRInst& a, IRInst& b) {
    a.Swap(&b);
  }
  inline void Swap(IRInst* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IRInst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IRInst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IRInst>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IRInst& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IRInst& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRInst* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "irpb.IRInst";
  }
  protected:
  explicit IRInst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOprandFieldNumber = 2,
    kLocsFieldNumber = 3,
    kOpcodeFieldNumber = 1,
    kIdxFieldNumber = 5,
    kIdxsFieldNumber = 6,
  };
  // repeated string Oprand = 2;
  int oprand_size() const;
  private:
  int _internal_oprand_size() const;
  public:
  void clear_oprand();
  const std::string& oprand(int index) const;
  std::string* mutable_oprand(int index);
  void set_oprand(int index, const std::string& value);
  void set_oprand(int index, std::string&& value);
  void set_oprand(int index, const char* value);
  void set_oprand(int index, const char* value, size_t size);
  std::string* add_oprand();
  void add_oprand(const std::string& value);
  void add_oprand(std::string&& value);
  void add_oprand(const char* value);
  void add_oprand(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& oprand() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_oprand();
  private:
  const std::string& _internal_oprand(int index) const;
  std::string* _internal_add_oprand();
  public:

  // repeated .irpb.InstLoc Locs = 3;
  int locs_size() const;
  private:
  int _internal_locs_size() const;
  public:
  void clear_locs();
  ::irpb::InstLoc* mutable_locs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstLoc >*
      mutable_locs();
  private:
  const ::irpb::InstLoc& _internal_locs(int index) const;
  ::irpb::InstLoc* _internal_add_locs();
  public:
  const ::irpb::InstLoc& locs(int index) const;
  ::irpb::InstLoc* add_locs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstLoc >&
      locs() const;

  // string Opcode = 1;
  void clear_opcode();
  const std::string& opcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opcode();
  PROTOBUF_NODISCARD std::string* release_opcode();
  void set_allocated_opcode(std::string* opcode);
  private:
  const std::string& _internal_opcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opcode(const std::string& value);
  std::string* _internal_mutable_opcode();
  public:

  // .irpb.InstIndex Idx = 5;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  const ::irpb::InstIndex& idx() const;
  PROTOBUF_NODISCARD ::irpb::InstIndex* release_idx();
  ::irpb::InstIndex* mutable_idx();
  void set_allocated_idx(::irpb::InstIndex* idx);
  private:
  const ::irpb::InstIndex& _internal_idx() const;
  ::irpb::InstIndex* _internal_mutable_idx();
  public:
  void unsafe_arena_set_allocated_idx(
      ::irpb::InstIndex* idx);
  ::irpb::InstIndex* unsafe_arena_release_idx();

  // .irpb.InstIndexList Idxs = 6;
  bool has_idxs() const;
  private:
  bool _internal_has_idxs() const;
  public:
  void clear_idxs();
  const ::irpb::InstIndexList& idxs() const;
  PROTOBUF_NODISCARD ::irpb::InstIndexList* release_idxs();
  ::irpb::InstIndexList* mutable_idxs();
  void set_allocated_idxs(::irpb::InstIndexList* idxs);
  private:
  const ::irpb::InstIndexList& _internal_idxs() const;
  ::irpb::InstIndexList* _internal_mutable_idxs();
  public:
  void unsafe_arena_set_allocated_idxs(
      ::irpb::InstIndexList* idxs);
  ::irpb::InstIndexList* unsafe_arena_release_idxs();

  // @@protoc_insertion_point(class_scope:irpb.IRInst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> oprand_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstLoc > locs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opcode_;
  ::irpb::InstIndex* idx_;
  ::irpb::InstIndexList* idxs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IRInfo_2eproto;
};
// -------------------------------------------------------------------

class IRBasicBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:irpb.IRBasicBlock) */ {
 public:
  inline IRBasicBlock() : IRBasicBlock(nullptr) {}
  ~IRBasicBlock() override;
  explicit PROTOBUF_CONSTEXPR IRBasicBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IRBasicBlock(const IRBasicBlock& from);
  IRBasicBlock(IRBasicBlock&& from) noexcept
    : IRBasicBlock() {
    *this = ::std::move(from);
  }

  inline IRBasicBlock& operator=(const IRBasicBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline IRBasicBlock& operator=(IRBasicBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IRBasicBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const IRBasicBlock* internal_default_instance() {
    return reinterpret_cast<const IRBasicBlock*>(
               &_IRBasicBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IRBasicBlock& a, IRBasicBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(IRBasicBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IRBasicBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IRBasicBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IRBasicBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IRBasicBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IRBasicBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRBasicBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "irpb.IRBasicBlock";
  }
  protected:
  explicit IRBasicBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsFieldNumber = 3,
    kSuccBBLabelFieldNumber = 4,
    kBBLabelListFieldNumber = 5,
    kPredBBLabelFieldNumber = 6,
    kBBLabelFieldNumber = 1,
  };
  // repeated .irpb.IRInst Is = 3;
  int is_size() const;
  private:
  int _internal_is_size() const;
  public:
  void clear_is();
  ::irpb::IRInst* mutable_is(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRInst >*
      mutable_is();
  private:
  const ::irpb::IRInst& _internal_is(int index) const;
  ::irpb::IRInst* _internal_add_is();
  public:
  const ::irpb::IRInst& is(int index) const;
  ::irpb::IRInst* add_is();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRInst >&
      is() const;

  // repeated string SuccBBLabel = 4;
  int succbblabel_size() const;
  private:
  int _internal_succbblabel_size() const;
  public:
  void clear_succbblabel();
  const std::string& succbblabel(int index) const;
  std::string* mutable_succbblabel(int index);
  void set_succbblabel(int index, const std::string& value);
  void set_succbblabel(int index, std::string&& value);
  void set_succbblabel(int index, const char* value);
  void set_succbblabel(int index, const char* value, size_t size);
  std::string* add_succbblabel();
  void add_succbblabel(const std::string& value);
  void add_succbblabel(std::string&& value);
  void add_succbblabel(const char* value);
  void add_succbblabel(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& succbblabel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_succbblabel();
  private:
  const std::string& _internal_succbblabel(int index) const;
  std::string* _internal_add_succbblabel();
  public:

  // repeated string BBLabelList = 5;
  int bblabellist_size() const;
  private:
  int _internal_bblabellist_size() const;
  public:
  void clear_bblabellist();
  const std::string& bblabellist(int index) const;
  std::string* mutable_bblabellist(int index);
  void set_bblabellist(int index, const std::string& value);
  void set_bblabellist(int index, std::string&& value);
  void set_bblabellist(int index, const char* value);
  void set_bblabellist(int index, const char* value, size_t size);
  std::string* add_bblabellist();
  void add_bblabellist(const std::string& value);
  void add_bblabellist(std::string&& value);
  void add_bblabellist(const char* value);
  void add_bblabellist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bblabellist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bblabellist();
  private:
  const std::string& _internal_bblabellist(int index) const;
  std::string* _internal_add_bblabellist();
  public:

  // repeated string PredBBLabel = 6;
  int predbblabel_size() const;
  private:
  int _internal_predbblabel_size() const;
  public:
  void clear_predbblabel();
  const std::string& predbblabel(int index) const;
  std::string* mutable_predbblabel(int index);
  void set_predbblabel(int index, const std::string& value);
  void set_predbblabel(int index, std::string&& value);
  void set_predbblabel(int index, const char* value);
  void set_predbblabel(int index, const char* value, size_t size);
  std::string* add_predbblabel();
  void add_predbblabel(const std::string& value);
  void add_predbblabel(std::string&& value);
  void add_predbblabel(const char* value);
  void add_predbblabel(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& predbblabel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_predbblabel();
  private:
  const std::string& _internal_predbblabel(int index) const;
  std::string* _internal_add_predbblabel();
  public:

  // string BBLabel = 1;
  void clear_bblabel();
  const std::string& bblabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bblabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bblabel();
  PROTOBUF_NODISCARD std::string* release_bblabel();
  void set_allocated_bblabel(std::string* bblabel);
  private:
  const std::string& _internal_bblabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bblabel(const std::string& value);
  std::string* _internal_mutable_bblabel();
  public:

  // @@protoc_insertion_point(class_scope:irpb.IRBasicBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRInst > is_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> succbblabel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bblabellist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> predbblabel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bblabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IRInfo_2eproto;
};
// -------------------------------------------------------------------

class IRFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:irpb.IRFunction) */ {
 public:
  inline IRFunction() : IRFunction(nullptr) {}
  ~IRFunction() override;
  explicit PROTOBUF_CONSTEXPR IRFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IRFunction(const IRFunction& from);
  IRFunction(IRFunction&& from) noexcept
    : IRFunction() {
    *this = ::std::move(from);
  }

  inline IRFunction& operator=(const IRFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline IRFunction& operator=(IRFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IRFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const IRFunction* internal_default_instance() {
    return reinterpret_cast<const IRFunction*>(
               &_IRFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IRFunction& a, IRFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(IRFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IRFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IRFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IRFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IRFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IRFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "irpb.IRFunction";
  }
  protected:
  explicit IRFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBBsFieldNumber = 3,
    kFuncNameFieldNumber = 1,
    kFuncIDFieldNumber = 2,
  };
  // repeated .irpb.IRBasicBlock BBs = 3;
  int bbs_size() const;
  private:
  int _internal_bbs_size() const;
  public:
  void clear_bbs();
  ::irpb::IRBasicBlock* mutable_bbs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRBasicBlock >*
      mutable_bbs();
  private:
  const ::irpb::IRBasicBlock& _internal_bbs(int index) const;
  ::irpb::IRBasicBlock* _internal_add_bbs();
  public:
  const ::irpb::IRBasicBlock& bbs(int index) const;
  ::irpb::IRBasicBlock* add_bbs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRBasicBlock >&
      bbs() const;

  // string FuncName = 1;
  void clear_funcname();
  const std::string& funcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_funcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_funcname();
  PROTOBUF_NODISCARD std::string* release_funcname();
  void set_allocated_funcname(std::string* funcname);
  private:
  const std::string& _internal_funcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funcname(const std::string& value);
  std::string* _internal_mutable_funcname();
  public:

  // uint32 FuncID = 2;
  void clear_funcid();
  uint32_t funcid() const;
  void set_funcid(uint32_t value);
  private:
  uint32_t _internal_funcid() const;
  void _internal_set_funcid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:irpb.IRFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRBasicBlock > bbs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funcname_;
  uint32_t funcid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IRInfo_2eproto;
};
// -------------------------------------------------------------------

class IRFunctionBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:irpb.IRFunctionBook) */ {
 public:
  inline IRFunctionBook() : IRFunctionBook(nullptr) {}
  ~IRFunctionBook() override;
  explicit PROTOBUF_CONSTEXPR IRFunctionBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IRFunctionBook(const IRFunctionBook& from);
  IRFunctionBook(IRFunctionBook&& from) noexcept
    : IRFunctionBook() {
    *this = ::std::move(from);
  }

  inline IRFunctionBook& operator=(const IRFunctionBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline IRFunctionBook& operator=(IRFunctionBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IRFunctionBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const IRFunctionBook* internal_default_instance() {
    return reinterpret_cast<const IRFunctionBook*>(
               &_IRFunctionBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IRFunctionBook& a, IRFunctionBook& b) {
    a.Swap(&b);
  }
  inline void Swap(IRFunctionBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IRFunctionBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IRFunctionBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IRFunctionBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IRFunctionBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IRFunctionBook& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRFunctionBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "irpb.IRFunctionBook";
  }
  protected:
  explicit IRFunctionBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFsFieldNumber = 1,
    kArchFieldNumber = 2,
  };
  // repeated .irpb.IRFunction Fs = 1;
  int fs_size() const;
  private:
  int _internal_fs_size() const;
  public:
  void clear_fs();
  ::irpb::IRFunction* mutable_fs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRFunction >*
      mutable_fs();
  private:
  const ::irpb::IRFunction& _internal_fs(int index) const;
  ::irpb::IRFunction* _internal_add_fs();
  public:
  const ::irpb::IRFunction& fs(int index) const;
  ::irpb::IRFunction* add_fs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRFunction >&
      fs() const;

  // string arch = 2;
  void clear_arch();
  const std::string& arch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arch();
  PROTOBUF_NODISCARD std::string* release_arch();
  void set_allocated_arch(std::string* arch);
  private:
  const std::string& _internal_arch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arch(const std::string& value);
  std::string* _internal_mutable_arch();
  public:

  // @@protoc_insertion_point(class_scope:irpb.IRFunctionBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRFunction > fs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IRInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstLoc

// string Filename = 1;
inline void InstLoc::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& InstLoc::filename() const {
  // @@protoc_insertion_point(field_get:irpb.InstLoc.Filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstLoc::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:irpb.InstLoc.Filename)
}
inline std::string* InstLoc::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:irpb.InstLoc.Filename)
  return _s;
}
inline const std::string& InstLoc::_internal_filename() const {
  return filename_.Get();
}
inline void InstLoc::_internal_set_filename(const std::string& value) {
  
  filename_.Set(value, GetArenaForAllocation());
}
inline std::string* InstLoc::_internal_mutable_filename() {
  
  return filename_.Mutable(GetArenaForAllocation());
}
inline std::string* InstLoc::release_filename() {
  // @@protoc_insertion_point(field_release:irpb.InstLoc.Filename)
  return filename_.Release();
}
inline void InstLoc::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault()) {
    filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:irpb.InstLoc.Filename)
}

// uint32 LineNo = 2;
inline void InstLoc::clear_lineno() {
  lineno_ = 0u;
}
inline uint32_t InstLoc::_internal_lineno() const {
  return lineno_;
}
inline uint32_t InstLoc::lineno() const {
  // @@protoc_insertion_point(field_get:irpb.InstLoc.LineNo)
  return _internal_lineno();
}
inline void InstLoc::_internal_set_lineno(uint32_t value) {
  
  lineno_ = value;
}
inline void InstLoc::set_lineno(uint32_t value) {
  _internal_set_lineno(value);
  // @@protoc_insertion_point(field_set:irpb.InstLoc.LineNo)
}

// uint32 ColNo = 3;
inline void InstLoc::clear_colno() {
  colno_ = 0u;
}
inline uint32_t InstLoc::_internal_colno() const {
  return colno_;
}
inline uint32_t InstLoc::colno() const {
  // @@protoc_insertion_point(field_get:irpb.InstLoc.ColNo)
  return _internal_colno();
}
inline void InstLoc::_internal_set_colno(uint32_t value) {
  
  colno_ = value;
}
inline void InstLoc::set_colno(uint32_t value) {
  _internal_set_colno(value);
  // @@protoc_insertion_point(field_set:irpb.InstLoc.ColNo)
}

// -------------------------------------------------------------------

// InstIndex

// string FuncName = 1;
inline void InstIndex::clear_funcname() {
  funcname_.ClearToEmpty();
}
inline const std::string& InstIndex::funcname() const {
  // @@protoc_insertion_point(field_get:irpb.InstIndex.FuncName)
  return _internal_funcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstIndex::set_funcname(ArgT0&& arg0, ArgT... args) {
 
 funcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:irpb.InstIndex.FuncName)
}
inline std::string* InstIndex::mutable_funcname() {
  std::string* _s = _internal_mutable_funcname();
  // @@protoc_insertion_point(field_mutable:irpb.InstIndex.FuncName)
  return _s;
}
inline const std::string& InstIndex::_internal_funcname() const {
  return funcname_.Get();
}
inline void InstIndex::_internal_set_funcname(const std::string& value) {
  
  funcname_.Set(value, GetArenaForAllocation());
}
inline std::string* InstIndex::_internal_mutable_funcname() {
  
  return funcname_.Mutable(GetArenaForAllocation());
}
inline std::string* InstIndex::release_funcname() {
  // @@protoc_insertion_point(field_release:irpb.InstIndex.FuncName)
  return funcname_.Release();
}
inline void InstIndex::set_allocated_funcname(std::string* funcname) {
  if (funcname != nullptr) {
    
  } else {
    
  }
  funcname_.SetAllocated(funcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (funcname_.IsDefault()) {
    funcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:irpb.InstIndex.FuncName)
}

// string BBLabel = 2;
inline void InstIndex::clear_bblabel() {
  bblabel_.ClearToEmpty();
}
inline const std::string& InstIndex::bblabel() const {
  // @@protoc_insertion_point(field_get:irpb.InstIndex.BBLabel)
  return _internal_bblabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstIndex::set_bblabel(ArgT0&& arg0, ArgT... args) {
 
 bblabel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:irpb.InstIndex.BBLabel)
}
inline std::string* InstIndex::mutable_bblabel() {
  std::string* _s = _internal_mutable_bblabel();
  // @@protoc_insertion_point(field_mutable:irpb.InstIndex.BBLabel)
  return _s;
}
inline const std::string& InstIndex::_internal_bblabel() const {
  return bblabel_.Get();
}
inline void InstIndex::_internal_set_bblabel(const std::string& value) {
  
  bblabel_.Set(value, GetArenaForAllocation());
}
inline std::string* InstIndex::_internal_mutable_bblabel() {
  
  return bblabel_.Mutable(GetArenaForAllocation());
}
inline std::string* InstIndex::release_bblabel() {
  // @@protoc_insertion_point(field_release:irpb.InstIndex.BBLabel)
  return bblabel_.Release();
}
inline void InstIndex::set_allocated_bblabel(std::string* bblabel) {
  if (bblabel != nullptr) {
    
  } else {
    
  }
  bblabel_.SetAllocated(bblabel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bblabel_.IsDefault()) {
    bblabel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:irpb.InstIndex.BBLabel)
}

// uint32 InstNo = 3;
inline void InstIndex::clear_instno() {
  instno_ = 0u;
}
inline uint32_t InstIndex::_internal_instno() const {
  return instno_;
}
inline uint32_t InstIndex::instno() const {
  // @@protoc_insertion_point(field_get:irpb.InstIndex.InstNo)
  return _internal_instno();
}
inline void InstIndex::_internal_set_instno(uint32_t value) {
  
  instno_ = value;
}
inline void InstIndex::set_instno(uint32_t value) {
  _internal_set_instno(value);
  // @@protoc_insertion_point(field_set:irpb.InstIndex.InstNo)
}

// -------------------------------------------------------------------

// InstIndexList

// repeated .irpb.InstIndex Idxs = 1;
inline int InstIndexList::_internal_idxs_size() const {
  return idxs_.size();
}
inline int InstIndexList::idxs_size() const {
  return _internal_idxs_size();
}
inline void InstIndexList::clear_idxs() {
  idxs_.Clear();
}
inline ::irpb::InstIndex* InstIndexList::mutable_idxs(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.InstIndexList.Idxs)
  return idxs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstIndex >*
InstIndexList::mutable_idxs() {
  // @@protoc_insertion_point(field_mutable_list:irpb.InstIndexList.Idxs)
  return &idxs_;
}
inline const ::irpb::InstIndex& InstIndexList::_internal_idxs(int index) const {
  return idxs_.Get(index);
}
inline const ::irpb::InstIndex& InstIndexList::idxs(int index) const {
  // @@protoc_insertion_point(field_get:irpb.InstIndexList.Idxs)
  return _internal_idxs(index);
}
inline ::irpb::InstIndex* InstIndexList::_internal_add_idxs() {
  return idxs_.Add();
}
inline ::irpb::InstIndex* InstIndexList::add_idxs() {
  ::irpb::InstIndex* _add = _internal_add_idxs();
  // @@protoc_insertion_point(field_add:irpb.InstIndexList.Idxs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstIndex >&
InstIndexList::idxs() const {
  // @@protoc_insertion_point(field_list:irpb.InstIndexList.Idxs)
  return idxs_;
}

// -------------------------------------------------------------------

// IRInst

// string Opcode = 1;
inline void IRInst::clear_opcode() {
  opcode_.ClearToEmpty();
}
inline const std::string& IRInst::opcode() const {
  // @@protoc_insertion_point(field_get:irpb.IRInst.Opcode)
  return _internal_opcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IRInst::set_opcode(ArgT0&& arg0, ArgT... args) {
 
 opcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:irpb.IRInst.Opcode)
}
inline std::string* IRInst::mutable_opcode() {
  std::string* _s = _internal_mutable_opcode();
  // @@protoc_insertion_point(field_mutable:irpb.IRInst.Opcode)
  return _s;
}
inline const std::string& IRInst::_internal_opcode() const {
  return opcode_.Get();
}
inline void IRInst::_internal_set_opcode(const std::string& value) {
  
  opcode_.Set(value, GetArenaForAllocation());
}
inline std::string* IRInst::_internal_mutable_opcode() {
  
  return opcode_.Mutable(GetArenaForAllocation());
}
inline std::string* IRInst::release_opcode() {
  // @@protoc_insertion_point(field_release:irpb.IRInst.Opcode)
  return opcode_.Release();
}
inline void IRInst::set_allocated_opcode(std::string* opcode) {
  if (opcode != nullptr) {
    
  } else {
    
  }
  opcode_.SetAllocated(opcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opcode_.IsDefault()) {
    opcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:irpb.IRInst.Opcode)
}

// repeated string Oprand = 2;
inline int IRInst::_internal_oprand_size() const {
  return oprand_.size();
}
inline int IRInst::oprand_size() const {
  return _internal_oprand_size();
}
inline void IRInst::clear_oprand() {
  oprand_.Clear();
}
inline std::string* IRInst::add_oprand() {
  std::string* _s = _internal_add_oprand();
  // @@protoc_insertion_point(field_add_mutable:irpb.IRInst.Oprand)
  return _s;
}
inline const std::string& IRInst::_internal_oprand(int index) const {
  return oprand_.Get(index);
}
inline const std::string& IRInst::oprand(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRInst.Oprand)
  return _internal_oprand(index);
}
inline std::string* IRInst::mutable_oprand(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRInst.Oprand)
  return oprand_.Mutable(index);
}
inline void IRInst::set_oprand(int index, const std::string& value) {
  oprand_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:irpb.IRInst.Oprand)
}
inline void IRInst::set_oprand(int index, std::string&& value) {
  oprand_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:irpb.IRInst.Oprand)
}
inline void IRInst::set_oprand(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  oprand_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:irpb.IRInst.Oprand)
}
inline void IRInst::set_oprand(int index, const char* value, size_t size) {
  oprand_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:irpb.IRInst.Oprand)
}
inline std::string* IRInst::_internal_add_oprand() {
  return oprand_.Add();
}
inline void IRInst::add_oprand(const std::string& value) {
  oprand_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:irpb.IRInst.Oprand)
}
inline void IRInst::add_oprand(std::string&& value) {
  oprand_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:irpb.IRInst.Oprand)
}
inline void IRInst::add_oprand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  oprand_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:irpb.IRInst.Oprand)
}
inline void IRInst::add_oprand(const char* value, size_t size) {
  oprand_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:irpb.IRInst.Oprand)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IRInst::oprand() const {
  // @@protoc_insertion_point(field_list:irpb.IRInst.Oprand)
  return oprand_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IRInst::mutable_oprand() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRInst.Oprand)
  return &oprand_;
}

// repeated .irpb.InstLoc Locs = 3;
inline int IRInst::_internal_locs_size() const {
  return locs_.size();
}
inline int IRInst::locs_size() const {
  return _internal_locs_size();
}
inline void IRInst::clear_locs() {
  locs_.Clear();
}
inline ::irpb::InstLoc* IRInst::mutable_locs(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRInst.Locs)
  return locs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstLoc >*
IRInst::mutable_locs() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRInst.Locs)
  return &locs_;
}
inline const ::irpb::InstLoc& IRInst::_internal_locs(int index) const {
  return locs_.Get(index);
}
inline const ::irpb::InstLoc& IRInst::locs(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRInst.Locs)
  return _internal_locs(index);
}
inline ::irpb::InstLoc* IRInst::_internal_add_locs() {
  return locs_.Add();
}
inline ::irpb::InstLoc* IRInst::add_locs() {
  ::irpb::InstLoc* _add = _internal_add_locs();
  // @@protoc_insertion_point(field_add:irpb.IRInst.Locs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::InstLoc >&
IRInst::locs() const {
  // @@protoc_insertion_point(field_list:irpb.IRInst.Locs)
  return locs_;
}

// .irpb.InstIndex Idx = 5;
inline bool IRInst::_internal_has_idx() const {
  return this != internal_default_instance() && idx_ != nullptr;
}
inline bool IRInst::has_idx() const {
  return _internal_has_idx();
}
inline void IRInst::clear_idx() {
  if (GetArenaForAllocation() == nullptr && idx_ != nullptr) {
    delete idx_;
  }
  idx_ = nullptr;
}
inline const ::irpb::InstIndex& IRInst::_internal_idx() const {
  const ::irpb::InstIndex* p = idx_;
  return p != nullptr ? *p : reinterpret_cast<const ::irpb::InstIndex&>(
      ::irpb::_InstIndex_default_instance_);
}
inline const ::irpb::InstIndex& IRInst::idx() const {
  // @@protoc_insertion_point(field_get:irpb.IRInst.Idx)
  return _internal_idx();
}
inline void IRInst::unsafe_arena_set_allocated_idx(
    ::irpb::InstIndex* idx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(idx_);
  }
  idx_ = idx;
  if (idx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:irpb.IRInst.Idx)
}
inline ::irpb::InstIndex* IRInst::release_idx() {
  
  ::irpb::InstIndex* temp = idx_;
  idx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::irpb::InstIndex* IRInst::unsafe_arena_release_idx() {
  // @@protoc_insertion_point(field_release:irpb.IRInst.Idx)
  
  ::irpb::InstIndex* temp = idx_;
  idx_ = nullptr;
  return temp;
}
inline ::irpb::InstIndex* IRInst::_internal_mutable_idx() {
  
  if (idx_ == nullptr) {
    auto* p = CreateMaybeMessage<::irpb::InstIndex>(GetArenaForAllocation());
    idx_ = p;
  }
  return idx_;
}
inline ::irpb::InstIndex* IRInst::mutable_idx() {
  ::irpb::InstIndex* _msg = _internal_mutable_idx();
  // @@protoc_insertion_point(field_mutable:irpb.IRInst.Idx)
  return _msg;
}
inline void IRInst::set_allocated_idx(::irpb::InstIndex* idx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete idx_;
  }
  if (idx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(idx);
    if (message_arena != submessage_arena) {
      idx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idx, submessage_arena);
    }
    
  } else {
    
  }
  idx_ = idx;
  // @@protoc_insertion_point(field_set_allocated:irpb.IRInst.Idx)
}

// .irpb.InstIndexList Idxs = 6;
inline bool IRInst::_internal_has_idxs() const {
  return this != internal_default_instance() && idxs_ != nullptr;
}
inline bool IRInst::has_idxs() const {
  return _internal_has_idxs();
}
inline void IRInst::clear_idxs() {
  if (GetArenaForAllocation() == nullptr && idxs_ != nullptr) {
    delete idxs_;
  }
  idxs_ = nullptr;
}
inline const ::irpb::InstIndexList& IRInst::_internal_idxs() const {
  const ::irpb::InstIndexList* p = idxs_;
  return p != nullptr ? *p : reinterpret_cast<const ::irpb::InstIndexList&>(
      ::irpb::_InstIndexList_default_instance_);
}
inline const ::irpb::InstIndexList& IRInst::idxs() const {
  // @@protoc_insertion_point(field_get:irpb.IRInst.Idxs)
  return _internal_idxs();
}
inline void IRInst::unsafe_arena_set_allocated_idxs(
    ::irpb::InstIndexList* idxs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(idxs_);
  }
  idxs_ = idxs;
  if (idxs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:irpb.IRInst.Idxs)
}
inline ::irpb::InstIndexList* IRInst::release_idxs() {
  
  ::irpb::InstIndexList* temp = idxs_;
  idxs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::irpb::InstIndexList* IRInst::unsafe_arena_release_idxs() {
  // @@protoc_insertion_point(field_release:irpb.IRInst.Idxs)
  
  ::irpb::InstIndexList* temp = idxs_;
  idxs_ = nullptr;
  return temp;
}
inline ::irpb::InstIndexList* IRInst::_internal_mutable_idxs() {
  
  if (idxs_ == nullptr) {
    auto* p = CreateMaybeMessage<::irpb::InstIndexList>(GetArenaForAllocation());
    idxs_ = p;
  }
  return idxs_;
}
inline ::irpb::InstIndexList* IRInst::mutable_idxs() {
  ::irpb::InstIndexList* _msg = _internal_mutable_idxs();
  // @@protoc_insertion_point(field_mutable:irpb.IRInst.Idxs)
  return _msg;
}
inline void IRInst::set_allocated_idxs(::irpb::InstIndexList* idxs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete idxs_;
  }
  if (idxs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(idxs);
    if (message_arena != submessage_arena) {
      idxs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idxs, submessage_arena);
    }
    
  } else {
    
  }
  idxs_ = idxs;
  // @@protoc_insertion_point(field_set_allocated:irpb.IRInst.Idxs)
}

// -------------------------------------------------------------------

// IRBasicBlock

// string BBLabel = 1;
inline void IRBasicBlock::clear_bblabel() {
  bblabel_.ClearToEmpty();
}
inline const std::string& IRBasicBlock::bblabel() const {
  // @@protoc_insertion_point(field_get:irpb.IRBasicBlock.BBLabel)
  return _internal_bblabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IRBasicBlock::set_bblabel(ArgT0&& arg0, ArgT... args) {
 
 bblabel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:irpb.IRBasicBlock.BBLabel)
}
inline std::string* IRBasicBlock::mutable_bblabel() {
  std::string* _s = _internal_mutable_bblabel();
  // @@protoc_insertion_point(field_mutable:irpb.IRBasicBlock.BBLabel)
  return _s;
}
inline const std::string& IRBasicBlock::_internal_bblabel() const {
  return bblabel_.Get();
}
inline void IRBasicBlock::_internal_set_bblabel(const std::string& value) {
  
  bblabel_.Set(value, GetArenaForAllocation());
}
inline std::string* IRBasicBlock::_internal_mutable_bblabel() {
  
  return bblabel_.Mutable(GetArenaForAllocation());
}
inline std::string* IRBasicBlock::release_bblabel() {
  // @@protoc_insertion_point(field_release:irpb.IRBasicBlock.BBLabel)
  return bblabel_.Release();
}
inline void IRBasicBlock::set_allocated_bblabel(std::string* bblabel) {
  if (bblabel != nullptr) {
    
  } else {
    
  }
  bblabel_.SetAllocated(bblabel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bblabel_.IsDefault()) {
    bblabel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:irpb.IRBasicBlock.BBLabel)
}

// repeated string BBLabelList = 5;
inline int IRBasicBlock::_internal_bblabellist_size() const {
  return bblabellist_.size();
}
inline int IRBasicBlock::bblabellist_size() const {
  return _internal_bblabellist_size();
}
inline void IRBasicBlock::clear_bblabellist() {
  bblabellist_.Clear();
}
inline std::string* IRBasicBlock::add_bblabellist() {
  std::string* _s = _internal_add_bblabellist();
  // @@protoc_insertion_point(field_add_mutable:irpb.IRBasicBlock.BBLabelList)
  return _s;
}
inline const std::string& IRBasicBlock::_internal_bblabellist(int index) const {
  return bblabellist_.Get(index);
}
inline const std::string& IRBasicBlock::bblabellist(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRBasicBlock.BBLabelList)
  return _internal_bblabellist(index);
}
inline std::string* IRBasicBlock::mutable_bblabellist(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRBasicBlock.BBLabelList)
  return bblabellist_.Mutable(index);
}
inline void IRBasicBlock::set_bblabellist(int index, const std::string& value) {
  bblabellist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:irpb.IRBasicBlock.BBLabelList)
}
inline void IRBasicBlock::set_bblabellist(int index, std::string&& value) {
  bblabellist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:irpb.IRBasicBlock.BBLabelList)
}
inline void IRBasicBlock::set_bblabellist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bblabellist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:irpb.IRBasicBlock.BBLabelList)
}
inline void IRBasicBlock::set_bblabellist(int index, const char* value, size_t size) {
  bblabellist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:irpb.IRBasicBlock.BBLabelList)
}
inline std::string* IRBasicBlock::_internal_add_bblabellist() {
  return bblabellist_.Add();
}
inline void IRBasicBlock::add_bblabellist(const std::string& value) {
  bblabellist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:irpb.IRBasicBlock.BBLabelList)
}
inline void IRBasicBlock::add_bblabellist(std::string&& value) {
  bblabellist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:irpb.IRBasicBlock.BBLabelList)
}
inline void IRBasicBlock::add_bblabellist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bblabellist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:irpb.IRBasicBlock.BBLabelList)
}
inline void IRBasicBlock::add_bblabellist(const char* value, size_t size) {
  bblabellist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:irpb.IRBasicBlock.BBLabelList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IRBasicBlock::bblabellist() const {
  // @@protoc_insertion_point(field_list:irpb.IRBasicBlock.BBLabelList)
  return bblabellist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IRBasicBlock::mutable_bblabellist() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRBasicBlock.BBLabelList)
  return &bblabellist_;
}

// repeated .irpb.IRInst Is = 3;
inline int IRBasicBlock::_internal_is_size() const {
  return is_.size();
}
inline int IRBasicBlock::is_size() const {
  return _internal_is_size();
}
inline void IRBasicBlock::clear_is() {
  is_.Clear();
}
inline ::irpb::IRInst* IRBasicBlock::mutable_is(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRBasicBlock.Is)
  return is_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRInst >*
IRBasicBlock::mutable_is() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRBasicBlock.Is)
  return &is_;
}
inline const ::irpb::IRInst& IRBasicBlock::_internal_is(int index) const {
  return is_.Get(index);
}
inline const ::irpb::IRInst& IRBasicBlock::is(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRBasicBlock.Is)
  return _internal_is(index);
}
inline ::irpb::IRInst* IRBasicBlock::_internal_add_is() {
  return is_.Add();
}
inline ::irpb::IRInst* IRBasicBlock::add_is() {
  ::irpb::IRInst* _add = _internal_add_is();
  // @@protoc_insertion_point(field_add:irpb.IRBasicBlock.Is)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRInst >&
IRBasicBlock::is() const {
  // @@protoc_insertion_point(field_list:irpb.IRBasicBlock.Is)
  return is_;
}

// repeated string SuccBBLabel = 4;
inline int IRBasicBlock::_internal_succbblabel_size() const {
  return succbblabel_.size();
}
inline int IRBasicBlock::succbblabel_size() const {
  return _internal_succbblabel_size();
}
inline void IRBasicBlock::clear_succbblabel() {
  succbblabel_.Clear();
}
inline std::string* IRBasicBlock::add_succbblabel() {
  std::string* _s = _internal_add_succbblabel();
  // @@protoc_insertion_point(field_add_mutable:irpb.IRBasicBlock.SuccBBLabel)
  return _s;
}
inline const std::string& IRBasicBlock::_internal_succbblabel(int index) const {
  return succbblabel_.Get(index);
}
inline const std::string& IRBasicBlock::succbblabel(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRBasicBlock.SuccBBLabel)
  return _internal_succbblabel(index);
}
inline std::string* IRBasicBlock::mutable_succbblabel(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRBasicBlock.SuccBBLabel)
  return succbblabel_.Mutable(index);
}
inline void IRBasicBlock::set_succbblabel(int index, const std::string& value) {
  succbblabel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:irpb.IRBasicBlock.SuccBBLabel)
}
inline void IRBasicBlock::set_succbblabel(int index, std::string&& value) {
  succbblabel_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:irpb.IRBasicBlock.SuccBBLabel)
}
inline void IRBasicBlock::set_succbblabel(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  succbblabel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:irpb.IRBasicBlock.SuccBBLabel)
}
inline void IRBasicBlock::set_succbblabel(int index, const char* value, size_t size) {
  succbblabel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:irpb.IRBasicBlock.SuccBBLabel)
}
inline std::string* IRBasicBlock::_internal_add_succbblabel() {
  return succbblabel_.Add();
}
inline void IRBasicBlock::add_succbblabel(const std::string& value) {
  succbblabel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:irpb.IRBasicBlock.SuccBBLabel)
}
inline void IRBasicBlock::add_succbblabel(std::string&& value) {
  succbblabel_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:irpb.IRBasicBlock.SuccBBLabel)
}
inline void IRBasicBlock::add_succbblabel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  succbblabel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:irpb.IRBasicBlock.SuccBBLabel)
}
inline void IRBasicBlock::add_succbblabel(const char* value, size_t size) {
  succbblabel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:irpb.IRBasicBlock.SuccBBLabel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IRBasicBlock::succbblabel() const {
  // @@protoc_insertion_point(field_list:irpb.IRBasicBlock.SuccBBLabel)
  return succbblabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IRBasicBlock::mutable_succbblabel() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRBasicBlock.SuccBBLabel)
  return &succbblabel_;
}

// repeated string PredBBLabel = 6;
inline int IRBasicBlock::_internal_predbblabel_size() const {
  return predbblabel_.size();
}
inline int IRBasicBlock::predbblabel_size() const {
  return _internal_predbblabel_size();
}
inline void IRBasicBlock::clear_predbblabel() {
  predbblabel_.Clear();
}
inline std::string* IRBasicBlock::add_predbblabel() {
  std::string* _s = _internal_add_predbblabel();
  // @@protoc_insertion_point(field_add_mutable:irpb.IRBasicBlock.PredBBLabel)
  return _s;
}
inline const std::string& IRBasicBlock::_internal_predbblabel(int index) const {
  return predbblabel_.Get(index);
}
inline const std::string& IRBasicBlock::predbblabel(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRBasicBlock.PredBBLabel)
  return _internal_predbblabel(index);
}
inline std::string* IRBasicBlock::mutable_predbblabel(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRBasicBlock.PredBBLabel)
  return predbblabel_.Mutable(index);
}
inline void IRBasicBlock::set_predbblabel(int index, const std::string& value) {
  predbblabel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:irpb.IRBasicBlock.PredBBLabel)
}
inline void IRBasicBlock::set_predbblabel(int index, std::string&& value) {
  predbblabel_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:irpb.IRBasicBlock.PredBBLabel)
}
inline void IRBasicBlock::set_predbblabel(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  predbblabel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:irpb.IRBasicBlock.PredBBLabel)
}
inline void IRBasicBlock::set_predbblabel(int index, const char* value, size_t size) {
  predbblabel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:irpb.IRBasicBlock.PredBBLabel)
}
inline std::string* IRBasicBlock::_internal_add_predbblabel() {
  return predbblabel_.Add();
}
inline void IRBasicBlock::add_predbblabel(const std::string& value) {
  predbblabel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:irpb.IRBasicBlock.PredBBLabel)
}
inline void IRBasicBlock::add_predbblabel(std::string&& value) {
  predbblabel_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:irpb.IRBasicBlock.PredBBLabel)
}
inline void IRBasicBlock::add_predbblabel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  predbblabel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:irpb.IRBasicBlock.PredBBLabel)
}
inline void IRBasicBlock::add_predbblabel(const char* value, size_t size) {
  predbblabel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:irpb.IRBasicBlock.PredBBLabel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IRBasicBlock::predbblabel() const {
  // @@protoc_insertion_point(field_list:irpb.IRBasicBlock.PredBBLabel)
  return predbblabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IRBasicBlock::mutable_predbblabel() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRBasicBlock.PredBBLabel)
  return &predbblabel_;
}

// -------------------------------------------------------------------

// IRFunction

// string FuncName = 1;
inline void IRFunction::clear_funcname() {
  funcname_.ClearToEmpty();
}
inline const std::string& IRFunction::funcname() const {
  // @@protoc_insertion_point(field_get:irpb.IRFunction.FuncName)
  return _internal_funcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IRFunction::set_funcname(ArgT0&& arg0, ArgT... args) {
 
 funcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:irpb.IRFunction.FuncName)
}
inline std::string* IRFunction::mutable_funcname() {
  std::string* _s = _internal_mutable_funcname();
  // @@protoc_insertion_point(field_mutable:irpb.IRFunction.FuncName)
  return _s;
}
inline const std::string& IRFunction::_internal_funcname() const {
  return funcname_.Get();
}
inline void IRFunction::_internal_set_funcname(const std::string& value) {
  
  funcname_.Set(value, GetArenaForAllocation());
}
inline std::string* IRFunction::_internal_mutable_funcname() {
  
  return funcname_.Mutable(GetArenaForAllocation());
}
inline std::string* IRFunction::release_funcname() {
  // @@protoc_insertion_point(field_release:irpb.IRFunction.FuncName)
  return funcname_.Release();
}
inline void IRFunction::set_allocated_funcname(std::string* funcname) {
  if (funcname != nullptr) {
    
  } else {
    
  }
  funcname_.SetAllocated(funcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (funcname_.IsDefault()) {
    funcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:irpb.IRFunction.FuncName)
}

// uint32 FuncID = 2;
inline void IRFunction::clear_funcid() {
  funcid_ = 0u;
}
inline uint32_t IRFunction::_internal_funcid() const {
  return funcid_;
}
inline uint32_t IRFunction::funcid() const {
  // @@protoc_insertion_point(field_get:irpb.IRFunction.FuncID)
  return _internal_funcid();
}
inline void IRFunction::_internal_set_funcid(uint32_t value) {
  
  funcid_ = value;
}
inline void IRFunction::set_funcid(uint32_t value) {
  _internal_set_funcid(value);
  // @@protoc_insertion_point(field_set:irpb.IRFunction.FuncID)
}

// repeated .irpb.IRBasicBlock BBs = 3;
inline int IRFunction::_internal_bbs_size() const {
  return bbs_.size();
}
inline int IRFunction::bbs_size() const {
  return _internal_bbs_size();
}
inline void IRFunction::clear_bbs() {
  bbs_.Clear();
}
inline ::irpb::IRBasicBlock* IRFunction::mutable_bbs(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRFunction.BBs)
  return bbs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRBasicBlock >*
IRFunction::mutable_bbs() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRFunction.BBs)
  return &bbs_;
}
inline const ::irpb::IRBasicBlock& IRFunction::_internal_bbs(int index) const {
  return bbs_.Get(index);
}
inline const ::irpb::IRBasicBlock& IRFunction::bbs(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRFunction.BBs)
  return _internal_bbs(index);
}
inline ::irpb::IRBasicBlock* IRFunction::_internal_add_bbs() {
  return bbs_.Add();
}
inline ::irpb::IRBasicBlock* IRFunction::add_bbs() {
  ::irpb::IRBasicBlock* _add = _internal_add_bbs();
  // @@protoc_insertion_point(field_add:irpb.IRFunction.BBs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRBasicBlock >&
IRFunction::bbs() const {
  // @@protoc_insertion_point(field_list:irpb.IRFunction.BBs)
  return bbs_;
}

// -------------------------------------------------------------------

// IRFunctionBook

// string arch = 2;
inline void IRFunctionBook::clear_arch() {
  arch_.ClearToEmpty();
}
inline const std::string& IRFunctionBook::arch() const {
  // @@protoc_insertion_point(field_get:irpb.IRFunctionBook.arch)
  return _internal_arch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IRFunctionBook::set_arch(ArgT0&& arg0, ArgT... args) {
 
 arch_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:irpb.IRFunctionBook.arch)
}
inline std::string* IRFunctionBook::mutable_arch() {
  std::string* _s = _internal_mutable_arch();
  // @@protoc_insertion_point(field_mutable:irpb.IRFunctionBook.arch)
  return _s;
}
inline const std::string& IRFunctionBook::_internal_arch() const {
  return arch_.Get();
}
inline void IRFunctionBook::_internal_set_arch(const std::string& value) {
  
  arch_.Set(value, GetArenaForAllocation());
}
inline std::string* IRFunctionBook::_internal_mutable_arch() {
  
  return arch_.Mutable(GetArenaForAllocation());
}
inline std::string* IRFunctionBook::release_arch() {
  // @@protoc_insertion_point(field_release:irpb.IRFunctionBook.arch)
  return arch_.Release();
}
inline void IRFunctionBook::set_allocated_arch(std::string* arch) {
  if (arch != nullptr) {
    
  } else {
    
  }
  arch_.SetAllocated(arch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (arch_.IsDefault()) {
    arch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:irpb.IRFunctionBook.arch)
}

// repeated .irpb.IRFunction Fs = 1;
inline int IRFunctionBook::_internal_fs_size() const {
  return fs_.size();
}
inline int IRFunctionBook::fs_size() const {
  return _internal_fs_size();
}
inline void IRFunctionBook::clear_fs() {
  fs_.Clear();
}
inline ::irpb::IRFunction* IRFunctionBook::mutable_fs(int index) {
  // @@protoc_insertion_point(field_mutable:irpb.IRFunctionBook.Fs)
  return fs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRFunction >*
IRFunctionBook::mutable_fs() {
  // @@protoc_insertion_point(field_mutable_list:irpb.IRFunctionBook.Fs)
  return &fs_;
}
inline const ::irpb::IRFunction& IRFunctionBook::_internal_fs(int index) const {
  return fs_.Get(index);
}
inline const ::irpb::IRFunction& IRFunctionBook::fs(int index) const {
  // @@protoc_insertion_point(field_get:irpb.IRFunctionBook.Fs)
  return _internal_fs(index);
}
inline ::irpb::IRFunction* IRFunctionBook::_internal_add_fs() {
  return fs_.Add();
}
inline ::irpb::IRFunction* IRFunctionBook::add_fs() {
  ::irpb::IRFunction* _add = _internal_add_fs();
  // @@protoc_insertion_point(field_add:irpb.IRFunctionBook.Fs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::irpb::IRFunction >&
IRFunctionBook::fs() const {
  // @@protoc_insertion_point(field_list:irpb.IRFunctionBook.Fs)
  return fs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace irpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IRInfo_2eproto
